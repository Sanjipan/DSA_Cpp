                    infix to postfix conversion using stack

Algorithm-->
>1 Initialize the Stack.
>2 Scan the operator from left to right in the infix expression.
>3 If the leftmost character is an operand, set it as the current output to the Postfix string.
>4 And if the scanned character is the operator and the Stack is empty or contains the '(', ')' symbol, push the operator into the Stack.
>5 If the scanned operator has higher precedence than the existing precedence operator in the Stack or if the Stack is empty, put it on the Stack.
>6 If the scanned operator has lower precedence than the existing operator in the Stack, pop all the Stack operators. After that, push the scanned operator into the Stack.
>7 If the scanned character is a left bracket '(', push it into the Stack.
>8 If we encountered right bracket ')', pop the Stack and print all output string character until '(' is encountered and discard both the bracket.
>9 Repeat all steps from 2 to 8 until the infix expression is scanned.
>10P rint the Stack output.
>11 Pop and output all characters, including the operator, from the Stack until it is not empty.


